import React, { useState, useContext, useEffect } from "react";
import { Axios, AxiosPost, UserContext } from "../../context/UserContext";
import { pushNotify } from "../../services/NotifyService";
// image
import logo from "../../images/logo-full.png";
import loginbg from "../../images/pic1.png";
import { ScaleLoader } from "react-spinners";
import Header from "./Header";
import Footer from "./Footer";

function Login() {
	const [isLoading, setIsLoading] = useState(false);
	const { loginUser, loggedInCheck } = useContext(UserContext);
	const [captchaData, setCaptchaData] = useState({ token: '', image: '' });
	const [formData, setFormData] = useState({
		captchaToken: "",
		captchaValue: "",
		username: "",
		password: "",
	});

	const onChangeInput = (e) => {
		setFormData({
			...formData,
			[e.target.name]: e.target.value,
		});
	};

	const fetchCaptcha = async (e) => {
		setIsLoading(true)
		e.preventDefault()
		try {
			const data = await AxiosPost("captcha.php");
			console.log(data);
			setCaptchaData({ token: data.token, image: data.image })
			setFormData({ ...formData, captchaToken: data.token })
		} catch {
			pushNotify("error", "Error", "Server Error!")
		} finally {
			setIsLoading(false)
		}
	}

	useEffect(() => {
		const temp = async()=>{
			setIsLoading(true)
			try {
				const data = await AxiosPost("captcha.php");
				console.log(data);
				setCaptchaData({ token: data.token, image: data.image })
				setFormData({ ...formData, captchaToken: data.token })
			} catch {
				pushNotify("error", "Error", "Server Error!")
			} finally {
				setIsLoading(false)
			}
		}
		temp()
	}, [])

	const submitForm = async (e) => {
		setIsLoading(true);
		e.preventDefault();
		console.log(formData);
		if (!Object.values(formData).every((val) => val.trim() !== "")) {
			pushNotify("error", "Error", "Please Fill in all Required Fields! in");
			setIsLoading(false);
			return;
		} else {
			const data = await loginUser(formData);
			console.log(data);
			if (data.Success) {
				setIsLoading(false);
				e.target.reset();
				await loggedInCheck();
			} else {
				pushNotify("error", "Error", data.message);
				setIsLoading(false);
			}
		}
	};

	return (
		<>
			<Header></Header>
			<div className="signin bg-gray-50 mt-5 mb-5" style={{ backgroundColor: "white" }}>
				<div className="container-base container">
					<div className="row">
						<div className="cust-card col">
							<div className="card-base card">
								<div className="text-center card-header">
									<h1 className="apts-signIn-title">Sign in</h1>
								</div>
								{
									isLoading ?
										<div className="row mx-0" style={{ height: "300px",width:"500px" }}><ScaleLoader cssOverride={{ "display": "flex", "justifyContent": "center", "alignItems": "center" }} /></div> :
										<form onSubmit={submitForm} autocomplete="off" className="">
											<div className="mb-3">
												<label className="form-label" for="formBasicEmail">
													Username
												</label>
												<input
													name="username"
													autocomplete="off"
													placeholder="Username"
													required
													type="text"
													value={formData.username}
													onChange={onChangeInput}
													className="form-control"
												/>
												<div className="invalid-feedback"></div>
											</div>
											<div className="mb-3">
												<label className="form-label">Password</label>
												<input
													name="password"
													autocomplete="off"
													placeholder="Password"
													required
													type="password"
													id="password"
													className="form-control"
													value={formData.password}
													onChange={onChangeInput}
												/>
												<div className="invalid-feedback"></div>
											</div>
											<div className="mb-3 row">
												<div className="col">
													<img
														src={`data:image/jpeg;base64,${captchaData.image}`}
														alt="captcha"
														className="mb-3"
													/>
													<a className="btn btn-sharp" onClick={fetchCaptcha}>
														<i className="fas fa-sync"></i>
													</a>
												</div>
												<div className="my-auto col-md-5">
													<input
														name="captchaValue"
														placeholder="Enter Captcha"
														autocomplete="off"
														required
														type="text"
														id="captchaValue"
														className="form-control"
														value={formData.captchaValue}
														onChange={onChangeInput}
													/>
													<div className="invalid-feedback"></div>
												</div>
											</div>
											<button
												type="submit"
												className="btn-md mb-4 w-100 btn btn-primary"
											>
												Submit
											</button>
										</form>
								}

							</div>
						</div>
					</div>
				</div>
			</div>
		</>
	);
}
export default Login;
