import React, { useContext, useEffect, useState } from 'react'
import { AxiosPost, UserContext } from '../../../context/UserContext'
import { pushNotify } from '../../../services/NotifyService'
import ReactDataGrid from '@inovua/reactdatagrid-community'
import '@inovua/reactdatagrid-community/index.css'
import Button from '@inovua/reactdatagrid-community/packages/Button';
import DateFilter from '@inovua/reactdatagrid-community/DateFilter'

function Applicants() {
	const { logout, setPath } = useContext(UserContext)
	const [applications, setApplications] = useState([])
	const [isLoading, setIsLoading] = useState(false)
	const [gridRef, setGridRef] = useState(null)

	useEffect(() => {
		setPath(window.location.pathname)
		fetchApplications()
	}, [])

	const gridStyle = { height: 'calc(100vh - 16.5rem)', marginTop: 10 };

	const filterValue = [
		{ name: 'name', operator: 'startsWith', type: 'string', value: '' },
		{ name: 'email', operator: 'startsWith', type: 'string', value: '' },
		{ name: 'phone', operator: 'startsWith', type: 'string', value: '' },
		{ name: 'title', operator: 'startsWith', type: 'string', value: '' },
		{ name: 'education', operator: 'startsWith', type: 'string', value: '' },
		{ name: 'year', operator: 'startsWith', type: 'string', value: '' },
		{ name: 'locations', operator: 'startsWith', type: 'string', value: '' }
	];

	const columns = [
		{ name: 'name', defaultFlex: 2, header: 'Name', minWidth: 200 },
		{ name: 'email', defaultFlex: 2, header: 'Email', minWidth: 200 },
		{ name: 'phone', defaultFlex: 2, header: 'Phone Number', minWidth: 200 },
		{
			name: 'resume_url', defaultFlex: 2, header: 'Resume', minWidth: 200,
			render: ({ value }) => (
				<a className='btn btn-primary' style={{ padding: "5px", borderRadius: '0' }} target='_blank' href={process.env.REACT_APP_API_HOST + value}>Resume</a>
			)
		},
		{ name: 'title', defaultFlex: 2, header: 'Job Title', minWidth: 200 },
		{
			name: 'education', defaultFlex: 2, header: 'Qualifications', minWidth: 200,
			render: ({ value }) => 
				(JSON.parse(value).value)
			
		},
		{ name: 'year', defaultFlex: 2, header: 'Passing Year', minWidth: 200 },
		{ name: 'locations', defaultFlex: 2, header: 'Locations', minWidth: 200 },
		{ name: 'applied_at', defaultFlex: 2, header: 'Applied at', minWidth: 200 },
	];

	const fetchApplications = async () => {
		setIsLoading(true)
		try {
			const data = await AxiosPost('fetch_applications.php')
			console.log(data);
			if (data.success) {
				setApplications(data.applications)
			}
			else pushNotify('error', 'Error', data.error);
		} catch (err) {
			pushNotify("error", "Error", "Server Error!");
			console.log(err)
		}
		finally {
			setIsLoading(false);
		}
	}
	const exportCSV = () => {
		const columns = gridRef.current.visibleColumns;

		const header = columns.map((c) => c.name).join(',');
		const rows = gridRef.current.data.map((data) => columns.map((c) => data[c.id]).join(','));

		const contents = [header].concat(rows).join('\n');
		const blob = new Blob([contents], { type: 'text/csv;charset=utf-8;' });

		downloadBlob(blob);
	};

	const downloadBlob = (blob, fileName = 'grid-data.csv') => {
		const link = document.createElement('a');
		const url = URL.createObjectURL(blob);

		link.setAttribute('href', url);
		link.setAttribute('download', fileName);
		link.style.position = 'absolute';
		link.style.visibility = 'hidden';

		document.body.appendChild(link);

		link.click();

		document.body.removeChild(link);
	};

	const refresh = async () => {
		await fetchApplications();
	}

	return (
		<>
			<Button onClick={refresh}>
				Sync Data
			</Button>
			<Button style={{ marginLeft: 10 }} onClick={exportCSV}>
				Export CSV
			</Button>
			<ReactDataGrid
				idProperty="id"
				style={gridStyle}
				columns={columns}
				pagination="local"
				dataSource={applications}
				defaultLimit={25}
				defaultFilterValue={filterValue}
				handle={setGridRef}
				loading={isLoading}
			/>
		</>
	)
}

export default Applicants