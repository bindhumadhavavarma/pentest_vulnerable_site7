import React from 'react'
import { useEffect } from 'react';
import { useState } from 'react'
import ReactDataGrid from '@inovua/reactdatagrid-community'
import '@inovua/reactdatagrid-community/index.css'
import Button from '@inovua/reactdatagrid-community/packages/Button';
import DateFilter from '@inovua/reactdatagrid-community/DateFilter'
import { Modal, Button as Button2 } from "react-bootstrap";
import AddJob from './AddJob';
import { pushNotify } from '../../../../services/NotifyService';
import { AxiosPost } from '../../../../context/UserContext';
import ScaleLoader from 'react-spinners/ScaleLoader';
import EditJob from './EditJob';

function JobsTable(props) {
    const [isLoading, setIsLoading] = useState(false)
    const [gridRef, setGridRef] = useState(null)
    const [showAddForm, setShowAddForm] = useState(false)
    const [deleteModal, setDeleteModal] = useState({ show: false, id: null });
    const [editModal,setEditModal] = useState({show:false,id:null})

    useEffect(() => {
        props.fetchJobs()
    }, [])

    const gridStyle = { height: 'calc(100vh - 16.5rem)', marginTop: 10 };

    const status_options = [
        { id: "Raised", label: "Raised", },
        { id: "Approved", label: "Approved", },
        { id: "Rejected", label: "Rejected", }
    ]

    const filterValue = [
        { name: 'title', operator: 'startsWith', type: 'string', value: '' },
        { name: 'type', operator: 'startsWith', type: 'string', value: '' },
        { name: 'locations', operator: 'startsWith', type: 'string', value: '' },
        { name: 'start_date', operator: 'before', type: 'date', value: '' },
        { name: 'end_date', operator: 'before', type: 'date', value: '' },
    ];

    const columns = [
        { name: 'title', header: 'Title', minWidth: 150 },
        { name: 'type', defaultFlex: 2, header: 'Type', minWidth: 150 },
        { name: 'locations', defaultFlex: 2, header: 'Locations', minWidth: 150 },
        { name: 'start_date', defaultFlex: 2, header: 'Start Date', filterEditor: DateFilter, minWidth: 150 },
        { name: 'end_date', defaultFlex: 2, header: 'End Date', filterEditor: DateFilter, minWidth: 150 },
        { name: 'status', defaultFlex: 2, header: 'Published', minWidth: 150 },
        {
            name: 'sl', defaultFlex: 2, header: 'Actions', minWidth: 150,
            render: ({ value }) => (
                <>
                    <button className="btn btn-primary tp-btn sharp" onClick={() => {setEditModal({show:true,id:value}) }} ><i className="fas fa-edit"></i></button>
                    <button className="btn btn-primary tp-btn sharp text-danger" onClick={() => showDeleteForm(value)} ><i className="fas fa-trash"></i></button>
                </>
            )
        },
    ];

    const showDeleteForm = (index) => {
        setDeleteModal({ show: true, id: index });
    }

    const deleteItem = async () => {
        setIsLoading(true);
        try {
            const data = await AxiosPost('delete_job.php', { sl: deleteModal.id })
            console.log(data);
            if (data.success) pushNotify('success', 'Success', 'Job Deleted Successfully');
            else pushNotify('error', 'Error', data.error);
            setDeleteModal({ show: false, id: null });
            await props.fetchJobs();
            console.log(data);
        } catch (err) {
            pushNotify("error", "Error", "Server Error!");
            console.log(err)
        }
        finally {
            setIsLoading(false);
        }
    }

    const cancelDelete = () => {
        setDeleteModal({ show: false, id: null });
    }

    const exportCSV = () => {
        const columns = gridRef.current.visibleColumns;

        const header = columns.map((c) => c.name).join(',');
        const rows = gridRef.current.data.map((data) => columns.map((c) => data[c.id]).join(','));

        const contents = [header].concat(rows).join('\n');
        const blob = new Blob([contents], { type: 'text/csv;charset=utf-8;' });

        downloadBlob(blob);
    };

    const downloadBlob = (blob, fileName = 'grid-data.csv') => {
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);

        link.setAttribute('href', url);
        link.setAttribute('download', fileName);
        link.style.position = 'absolute';
        link.style.visibility = 'hidden';

        document.body.appendChild(link);

        link.click();

        document.body.removeChild(link);
    };

    const refresh = async () => {
        await props.fetchJobs();
    }

    return (
        <>
            <Button onClick={refresh}>
                Sync Data
            </Button>
            <Button style={{ marginLeft: 10 }} onClick={exportCSV}>
                Export CSV
            </Button>
            <Button style={{ marginLeft: 10 }} onClick={() => { setShowAddForm(true) }}>
                <i className="fas fa-plus"></i> Add Job
            </Button>
            <ReactDataGrid
                idProperty="id"
                style={gridStyle}
                columns={columns}
                pagination="local"
                dataSource={props.jobs}
                defaultLimit={25}
                defaultFilterValue={filterValue}
                handle={setGridRef}
                loading={isLoading || props.isLoading ? true : false}
            />


            <Modal className="" size='xl' show={showAddForm} centered enforceFocus={false}>
                <Modal.Header>
                    <Modal.Title>Create a new Job</Modal.Title>
                    <Button2
                        onClick={() => setShowAddForm(false)}
                        variant=""
                        className="btn-close"
                    >

                    </Button2>
                </Modal.Header>
                <Modal.Body>
                    <AddJob fetchJobs={props.fetchJobs} setShowAddForm={setShowAddForm}></AddJob>
                </Modal.Body>
            </Modal>
            <Modal className="fade" show={deleteModal.show} centered>
                <Modal.Header>
                    <Modal.Title>Delete Job?</Modal.Title>
                    <button
                        onClick={cancelDelete}
                        className="btn-close"
                    >
                    </button>
                </Modal.Header>
                <Modal.Body>
                    {isLoading ? <ScaleLoader cssOverride={{ "display": "flex", "justifyContent": "center", "alignItems": "center" }} />
                        : <h4 style={{ fontWeight: "normal" }}>Are you sure you want to delete the Job?</h4>}

                </Modal.Body>
                <Modal.Footer>
                    <button
                        onClick={deleteItem}
                        className="btn btn-danger"
                    >
                        Delete
                    </button>
                    <button className="btn btn-primary" onClick={cancelDelete}>Cancel</button>
                </Modal.Footer>
            </Modal>
            <Modal className="" size='xl' show={editModal.show} centered enforceFocus={false}>
                <Modal.Header>
                    <Modal.Title>Create a new Job</Modal.Title>
                    <Button2
                        onClick={() => setEditModal({show:false,id:null})}
                        variant=""
                        className="btn-close"
                    >

                    </Button2>
                </Modal.Header>
                <Modal.Body>
                    <EditJob sl={editModal.id} setEditModal={setEditModal} fetchJobs={props.fetchJobs}></EditJob>
                </Modal.Body>
            </Modal>
        </>
    )
}

export default JobsTable